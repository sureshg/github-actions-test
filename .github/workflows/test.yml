name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

defaults:
  run:
    shell: bash

jobs:
  test:
    name: OpenJDK ${{ matrix.java }} (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        java: [ '21' ]
        os: [ macos-latest, windows-latest, ubuntu-latest ]

    steps:
      - uses: actions/checkout@v3

      - name: Setup OpenJDK EA ${{ matrix.java }} build
        id: setup-java
        uses: oracle-actions/setup-java@main
        with:
          website: jdk.java.net
          release: ${{ matrix.java }}
          install: true

      - name: Java options check ${{ env.OSTYPE }}
        run: |
          printf "Java Version: \n" 
          java --version
          
          echo "-------- TMP PATH for $OSTYPE --------"
          MKTEMP_PATH="$(dirname "$(mktemp -u)")/"
          
          echo "MKTEMP_PATH = $MKTEMP_PATH"
          echo "TMP         = $TMP"
          echo "TEMP        = $TEMP"
          echo "TMPDIR      = $TMPDIR"
          echo "RUNNER_TEMP = $RUNNER_TEMP"
          echo "$(java -XshowSettings:properties -version 2>&1 | grep tmpdir)"
          echo "/TMP        = $(ls -l /tmp)"
          echo "---------------------------------------"
          
          echo "------- Env Vars: -------"
          printenv
          echo "-------------------------"

          printf "Setting the Temp Dir \n"
          MY_TMP_PATH=$MKTEMP_PATH
          echo "Temp Dir = ${MY_TMP_PATH}"
          
          printf "\n"
          echo "Temp directory contents are..."
          ls -ltrh ${MY_TMP_PATH}
          
          printf "\n"
          echo "Starting the java app..."
          java --enable-preview \
               --add-modules=jdk.incubator.concurrent,jdk.incubator.vector \
               --enable-native-access=ALL-UNNAMED \
               -XshowSettings:all \
               -Xmx128M \
               -XX:+PrintCommandLineFlags \
               -XX:+UseZGC \
               -Xlog:cds,safepoint,gc\*:file="${MY_TMP_PATH}openjdk-playground-gc-%p-%t.log":level,tags,time,uptime,pid,tid:filecount=5,filesize=10m \
               -XX:StartFlightRecording=settings=profile.jfc,filename="${MY_TMP_PATH}"/openjdk-playground.jfr,name=openjdk-playground,maxsize=100M,dumponexit=true,memory-leaks=gc-roots,gc=detailed,jdk.ObjectCount#enabled=true,jdk.SecurityPropertyModification#enabled=true,jdk.TLSHandshake#enabled=true,jdk.X509Certificate#enabled=true,jdk.X509Validation#enabled=true \
               -XX:FlightRecorderOptions:stackdepth=64 \
               -XX:+HeapDumpOnOutOfMemoryError \
               -XX:HeapDumpPath="${MY_TMP_PATH}"openjdk-playground-%p.hprof \
               -XX:ErrorFile="${MY_TMP_PATH}"openjdk-playground-hs-err-%p.log \
               -XX:OnOutOfMemoryError='kill -9 %p' \
               -XX:+ExitOnOutOfMemoryError \
               -Djava.awt.headless=true \
               -Djdk.attach.allowAttachSelf=true \
               -Djdk.tracePinnedThreads=full \
               -Djava.security.debug=properties \
               -Djava.security.egd=file:/dev/./urandom \
               -Djdk.includeInExceptions=hostInfo,jar \
               -XX:+UnlockDiagnosticVMOptions \
               -XX:+LogVMOutput \
               -XX:LogFile="${MY_TMP_PATH}"openjdk-playground-jvm.log \
               -XX:NativeMemoryTracking=summary \
               -XX:+ShowHiddenFrames \
               -ea \
               --version 
          
          printf "\n"
          echo "Temp directory contents are after java run..."
          ls -ltrh ${MY_TMP_PATH}
       
